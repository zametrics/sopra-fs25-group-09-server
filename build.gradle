plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
    //id "org.sonarqube" version "6.0.1.5171"
}

group 'ch.uzh.ifi.hasel'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

dependencies {

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.mindrot:jbcrypt:0.4' //instead of spring security
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // for WebClient    //these 2 are for chatGPT api to work
    implementation 'com.fasterxml.jackson.core:jackson-databind'          // for JSON parsing

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    implementation 'com.google.cloud:google-cloud-storage:2.34.0' // added for google cloud storage
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonar {
  properties {
    property "sonar.projectKey", "zametrics_sopra-fs25-group-09-server"
    property "sonar.organization", "zametrics"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.login", "59d54abd187f7bcdaa7110e816a1c37caa97d620"
  }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1

    // Pass env variable to the JVM so it's available in tests
    if (System.getenv("OPENAI_API_KEY") != null) {
        systemProperty "OPENAI_API_KEY", System.getenv("OPENAI_API_KEY")
    }
}

// This block should be outside of 'test'
File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

defaultTasks 'bootJar', 'build'

